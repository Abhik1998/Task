open System

let uri = "actor.transport://node1@localhost:6667/actor/mine"
let wildcardUri = "*://node1@*/actor/mine"
let relativeUri = "/actor/mine"

[<AutoOpen>]
module internal Helpers = 

    type String with
        member x.IsEmpty 
            with get() = String.IsNullOrEmpty(x) || String.IsNullOrWhiteSpace(x)

    module Option = 
        
        let stringIsNoneIfBlank (str : string option) = 
            str |> Option.bind (fun sys -> if sys.IsEmpty then None else Some sys)

type ActorPathComponent =
    | Transport of string
    | System of string
    | Host of string
    | Port of int
    | PathComponent of string[]

type ActorPath = {
    Transport : string option
    System : string option
    Host : string option
    Port : int option
    HostType : UriHostNameType option
    Path : string[]
}
with
    static member internal Empty = 
            { 
                Transport = None
                System = None
                Host = None 
                Port = None
                HostType = None 
                Path = [||] 
            }    
     

let parseActorPath (str:string) =
    let buildComponents (comp:string) = 
        if comp.EndsWith(":")
        then  [| Transport(comp.TrimEnd(':')) |]
        else
            let processHost (host:string) = 
                match host.Split(':') with
                | [| host; port |] -> [| Host(host); Port(Int32.Parse(port)) |]
                | a -> [| Host(host) |]
            match comp.Split([|'@'|]) with
            | [|a|] when a.Contains(":") -> processHost a
            | [|a|] -> [|System(a)|] 
            | [|node; host|] ->
                let host = processHost host
                Array.append [|System node|] host
            | a -> [|a |> PathComponent|]

    let buildPath state comp =
        match comp with
        | Transport(trsn) when trsn <> "*" && (not trsn.IsEmpty) -> { state with Transport = (Some trsn) }
        | System(sys) when sys <> "*" && (not sys.IsEmpty) -> { state with System = (Some sys)}
        | Host(host) when host <> "*" && (not host.IsEmpty) -> 
            let hostType = Uri.CheckHostName(host)
            { state with Host = (Some host); HostType = (Some hostType) }
        | Port(port) -> { state with Port = (Some port) }
        | PathComponent(path) -> { state with Path = Array.append state.Path path}
        | _ -> state

    str.Split([|"/"|], StringSplitOptions.RemoveEmptyEntries)
    |> Array.collect buildComponents
 //   |> Array.fold buildPath ActorPath.Empty
    

parseActorPath "*://node1@*/actor/mine"
parseActorPath "/node1@/actor/mine"
parseActorPath uri
parseActorPath relativeUri
